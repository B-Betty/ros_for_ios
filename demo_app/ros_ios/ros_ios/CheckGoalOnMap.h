/* Auto-generated by genmsg_cpp for file /home/ronan/ros_workspace/jn0_trunk/ros-pkgs/irl_perception/image_tools/srv/CheckGoalOnMap.srv */
#ifndef IMAGE_TOOLS_SERVICE_CHECKGOALONMAP_H
#define IMAGE_TOOLS_SERVICE_CHECKGOALONMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace image_tools
{
template <class ContainerAllocator>
struct CheckGoalOnMapRequest_ {
  typedef CheckGoalOnMapRequest_<ContainerAllocator> Type;

  CheckGoalOnMapRequest_()
  : x(0)
  , y(0)
  {
  }

  CheckGoalOnMapRequest_(const ContainerAllocator& _alloc)
  : x(0)
  , y(0)
  {
  }

  typedef int32_t _x_type;
  int32_t x;

  typedef int32_t _y_type;
  int32_t y;


  typedef boost::shared_ptr< ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CheckGoalOnMapRequest
typedef  ::image_tools::CheckGoalOnMapRequest_<std::allocator<void> > CheckGoalOnMapRequest;

typedef boost::shared_ptr< ::image_tools::CheckGoalOnMapRequest> CheckGoalOnMapRequestPtr;
typedef boost::shared_ptr< ::image_tools::CheckGoalOnMapRequest const> CheckGoalOnMapRequestConstPtr;


template <class ContainerAllocator>
struct CheckGoalOnMapResponse_ {
  typedef CheckGoalOnMapResponse_<ContainerAllocator> Type;

  CheckGoalOnMapResponse_()
  : valid(0)
  {
  }

  CheckGoalOnMapResponse_(const ContainerAllocator& _alloc)
  : valid(0)
  {
  }

  typedef uint8_t _valid_type;
  uint8_t valid;


  typedef boost::shared_ptr< ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CheckGoalOnMapResponse
typedef  ::image_tools::CheckGoalOnMapResponse_<std::allocator<void> > CheckGoalOnMapResponse;

typedef boost::shared_ptr< ::image_tools::CheckGoalOnMapResponse> CheckGoalOnMapResponsePtr;
typedef boost::shared_ptr< ::image_tools::CheckGoalOnMapResponse const> CheckGoalOnMapResponseConstPtr;

struct CheckGoalOnMap
{

typedef CheckGoalOnMapRequest Request;
typedef CheckGoalOnMapResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CheckGoalOnMap
} // namespace image_tools

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bd7b43fd41d4c47bf5c703cc7d016709";
  }

  static const char* value(const  ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbd7b43fd41d4c47bULL;
  static const uint64_t static_value2 = 0xf5c703cc7d016709ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_tools/CheckGoalOnMapRequest";
  }

  static const char* value(const  ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 x\n\
int32 y\n\
\n\
";
  }

  static const char* value(const  ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "51bc3eaec018cbbd61173ff5e777f764";
  }

  static const char* value(const  ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x51bc3eaec018cbbdULL;
  static const uint64_t static_value2 = 0x61173ff5e777f764ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_tools/CheckGoalOnMapResponse";
  }

  static const char* value(const  ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 valid\n\
\n\
\n\
";
  }

  static const char* value(const  ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::image_tools::CheckGoalOnMapRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CheckGoalOnMapRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::image_tools::CheckGoalOnMapResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.valid);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CheckGoalOnMapResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<image_tools::CheckGoalOnMap> {
  static const char* value() 
  {
    return "ffddeb931ce12eeaab65343d5482090c";
  }

  static const char* value(const image_tools::CheckGoalOnMap&) { return value(); } 
};

template<>
struct DataType<image_tools::CheckGoalOnMap> {
  static const char* value() 
  {
    return "image_tools/CheckGoalOnMap";
  }

  static const char* value(const image_tools::CheckGoalOnMap&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<image_tools::CheckGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ffddeb931ce12eeaab65343d5482090c";
  }

  static const char* value(const image_tools::CheckGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<image_tools::CheckGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_tools/CheckGoalOnMap";
  }

  static const char* value(const image_tools::CheckGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<image_tools::CheckGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ffddeb931ce12eeaab65343d5482090c";
  }

  static const char* value(const image_tools::CheckGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<image_tools::CheckGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_tools/CheckGoalOnMap";
  }

  static const char* value(const image_tools::CheckGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IMAGE_TOOLS_SERVICE_CHECKGOALONMAP_H

