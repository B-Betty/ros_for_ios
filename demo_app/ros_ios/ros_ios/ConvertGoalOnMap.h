/* Auto-generated by genmsg_cpp for file /home/ronan/ros_workspace/jn0_trunk/ros-pkgs/irl_perception/image_tools/srv/ConvertGoalOnMap.srv */
#ifndef IMAGE_TOOLS_SERVICE_CONVERTGOALONMAP_H
#define IMAGE_TOOLS_SERVICE_CONVERTGOALONMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/Pose.h"

namespace image_tools
{
template <class ContainerAllocator>
struct ConvertGoalOnMapRequest_ {
  typedef ConvertGoalOnMapRequest_<ContainerAllocator> Type;

  ConvertGoalOnMapRequest_()
  : x(0)
  , y(0)
  {
  }

  ConvertGoalOnMapRequest_(const ContainerAllocator& _alloc)
  : x(0)
  , y(0)
  {
  }

  typedef int32_t _x_type;
  int32_t x;

  typedef int32_t _y_type;
  int32_t y;


  typedef boost::shared_ptr< ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ConvertGoalOnMapRequest
typedef  ::image_tools::ConvertGoalOnMapRequest_<std::allocator<void> > ConvertGoalOnMapRequest;

typedef boost::shared_ptr< ::image_tools::ConvertGoalOnMapRequest> ConvertGoalOnMapRequestPtr;
typedef boost::shared_ptr< ::image_tools::ConvertGoalOnMapRequest const> ConvertGoalOnMapRequestConstPtr;


template <class ContainerAllocator>
struct ConvertGoalOnMapResponse_ {
  typedef ConvertGoalOnMapResponse_<ContainerAllocator> Type;

  ConvertGoalOnMapResponse_()
  : goal()
  {
  }

  ConvertGoalOnMapResponse_(const ContainerAllocator& _alloc)
  : goal(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _goal_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  goal;


  typedef boost::shared_ptr< ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ConvertGoalOnMapResponse
typedef  ::image_tools::ConvertGoalOnMapResponse_<std::allocator<void> > ConvertGoalOnMapResponse;

typedef boost::shared_ptr< ::image_tools::ConvertGoalOnMapResponse> ConvertGoalOnMapResponsePtr;
typedef boost::shared_ptr< ::image_tools::ConvertGoalOnMapResponse const> ConvertGoalOnMapResponseConstPtr;

struct ConvertGoalOnMap
{

typedef ConvertGoalOnMapRequest Request;
typedef ConvertGoalOnMapResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ConvertGoalOnMap
} // namespace image_tools

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bd7b43fd41d4c47bf5c703cc7d016709";
  }

  static const char* value(const  ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbd7b43fd41d4c47bULL;
  static const uint64_t static_value2 = 0xf5c703cc7d016709ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_tools/ConvertGoalOnMapRequest";
  }

  static const char* value(const  ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 x\n\
int32 y\n\
\n\
";
  }

  static const char* value(const  ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "313b76aa4f010582b3257488c62ac366";
  }

  static const char* value(const  ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x313b76aa4f010582ULL;
  static const uint64_t static_value2 = 0xb3257488c62ac366ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_tools/ConvertGoalOnMapResponse";
  }

  static const char* value(const  ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose goal\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ConvertGoalOnMapRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.goal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ConvertGoalOnMapResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<image_tools::ConvertGoalOnMap> {
  static const char* value() 
  {
    return "b63591e6ea76b7f650cf84f6254dbba4";
  }

  static const char* value(const image_tools::ConvertGoalOnMap&) { return value(); } 
};

template<>
struct DataType<image_tools::ConvertGoalOnMap> {
  static const char* value() 
  {
    return "image_tools/ConvertGoalOnMap";
  }

  static const char* value(const image_tools::ConvertGoalOnMap&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b63591e6ea76b7f650cf84f6254dbba4";
  }

  static const char* value(const image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_tools/ConvertGoalOnMap";
  }

  static const char* value(const image_tools::ConvertGoalOnMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b63591e6ea76b7f650cf84f6254dbba4";
  }

  static const char* value(const image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_tools/ConvertGoalOnMap";
  }

  static const char* value(const image_tools::ConvertGoalOnMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IMAGE_TOOLS_SERVICE_CONVERTGOALONMAP_H

